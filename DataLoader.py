# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DataLoader
                                 A QGIS plugin
 Loads spectral data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-02
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Morten Sickel
        email                : morten@sickel.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .DataLoader_dialog import DataLoaderDialog
import os.path

from qgis.core import QgsVectorLayer, QgsFeature, QgsField, QgsGeometry, QgsPointXY, QgsField, QgsProject, QgsMapLayerProxyModel, QgsCoordinateTransform, QgsCoordinateReferenceSystem

from qgis.core import Qgis

from qgis.gui import QgsFileWidget

from PyQt5.QtCore import *
#from PyQt.QtGui import QFileDialog

class unknownFileType(Exception):
    pass


class DataLoader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DataLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Spectral data')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DataLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/DataLoader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Load spectral data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Spectral data loader'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DataLoaderDialog(parent=self.iface.mainWindow())
            self.dlg.pbLoadData.clicked.connect(self.selectfile)
            self.dlg.pbNewLayer.clicked.connect(self.createlayer)
            self.dlg.pbClose.clicked.connect(self.closedlg)
            self.dlg.cbMapLayer.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.cbMapLayer.setShowCrs(True)
            
            
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        
    def closedlg(self):
        self.dlg.hide()

    
    def lst2arr(self,alist):
        """ Makes a comma separated string. If postgres is used, the string is formatted to be inserted as
        a native array"""
        ret=','.join(alist)
        if self.database=="PG":
            ret='{' + ret + '}'
        return(ret)

    def selectfile(self):
        self.mission=self.dlg.leMission.text()
        self.vl=self.dlg.cbMapLayer.currentLayer()
        self.pr = self.vl.dataProvider()
        self.filename=self.dlg.FileWidget.filePath()
        self.database="MEM"
        fromCRS=QgsCoordinateReferenceSystem("EPSG:4326")
        #TODO: User selectable source CRS
        toCRS= self.vl.crs()
        print(fromCRS)
        print(toCRS)
        self.transformation = QgsCoordinateTransform(fromCRS, toCRS, QgsProject.instance())
        try:
            #TODO: Other file reading functions - eg. based on file name
            if self.filename.endswith('.csv'):
                self.readRSI()
            elif self.filename.endswith('.spe'):
                self.readspe()
            else:
                raise unknownFileType()
            # Refreshes canvas and clears dialog to make it clear that the data have been imported
            self.iface.mapCanvas().refreshAllLayers()
            self.dlg.leMission.clear()
            self.dlg.FileWidget.setFilePath("")
            self.iface.messageBar().pushMessage("Data Loader", "File imported sucessfully to '{}'".format(self.vl.name()), level=Qgis.Success)
        except Exception as e:
            print(e)
            self.iface.messageBar().pushMessage("Data Loader", "Problem when importing '{}'".format(self.filename), level=Qgis.Critical)
            
    
    def readspe(self):
        directory=os.path.split(self.filename)[0]
        files=os.listdir(directory)
        spefiles=list(filter(lambda x: x.endswith('.spe'), files))
        spefiles.sort()
        print(spefiles)
        readspec=False
        readGPS=False
        
        for filename in spefiles:
            spectre=[]
            gpsdata=dict()
            with open(directory+'/'+filename, "r",encoding='latin-1') as f:
                for line in f:
                    if readspec:
                        if not line.startswith('$'):
                            spectre.append(line.strip())
                            continue
                        else:
                            readspec=False
                            spectre=self.lst2arr(spectre)
                    if readGPS:
                        if not line.startswith('$'):
                            parts=line.split('=')
                            gpsdata[parts[0]]=parts[1].strip()
                            continue
                    readGPS=line.startswith('$GPS:')
                    if line.startswith('$DATE_MEA:'):
                        date=f.readline()
                        continue
                    if line.startswith('$DATA'):
                        readspec=True
                        nlines=f.readline().split()[1].strip()
                    if line.startswith('$DOSE_RATE:'):
                        dose=f.readline().strip()
                    if line.startswith('$TEMPERATURE:'):
                        temperature=f.readline().strip()
            insdata=[float(gpsdata['Alt']),date,float(dose),'',spectre,'',2,'', float(temperature), '', self.filename, self.mission]
            self.insertpoint(float(gpsdata['Lat']),float(gpsdata['Lon']),insdata)
                        
        
    
    def readRSI(self):
        fs={'lat':9,
            'lon':8,
            'gpsalt':10,
            'acqtime':1,
            'dose1':14,
            'dose2':28,
            'laseralt':24,
            'radaralt':23,
            'press':22,
            'temp':21,
            'line':11}
        fs['alt']=fs['laseralt']
        #TODO: User selectable field mapping
        header=True
        idxs=[]
        with open(self.filename, "r",encoding='latin-1') as f:
            for idx,line in enumerate(f):
                data=(line.split(',')) 
                if(header):
                    # RSI export CSV has a two line header. Need to fetch some information from it to be able to 
                    # read the spectre in a sensible way
                    if idx ==1:
                        matching = [s for s in data if "Spectrum VD" in s]
                        print(matching)
                        get_indexes = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x in y]
                        idxs=get_indexes("Spectrum VD",data)
                    header = idx<2
                else:
                    vd1=self.lst2arr(data[idxs[0]:idxs[0]+1024])
                    vd2=self.lst2arr(data[idxs[1]:idxs[1]+1024])
                    # TODO: Make a timestamp from the epoch number
                    insdata=[data[10],data[1],data[14],data[28],vd1,vd2,data[24],data[22],data[21],data[11],self.filename,self.mission]
                    self.insertpoint(data[fs['lat']],data[fs['lon']],insdata)
                
    def insertpoint(self,lat,lon,insdata):
        fet = QgsFeature()
        point=QgsPointXY(float(lon),float(lat))
        prpoint=self.transformation.transform(point)
        geom=QgsGeometry.fromPointXY(prpoint)
        fet.setGeometry(geom)
        insdata=[x if x !='' else None for x in insdata]
        fet.setAttributes(insdata)
        self.pr.addFeatures( [ fet ] )
                    

    def createlayer(self):
        layername="Spectral data"
        mission=self.dlg.leMission.text()
        if mission > '':
            layername="{} ({})".format(layername,mission)
        # Uses the project to set a crs for the layer|
        # TODO: Show a reminder if project == EPSG3246, that this may not be what one wants
        CRS= QgsProject.instance().crs()
        vl = QgsVectorLayer("Point", layername, "memory",crs=CRS)
        pr = vl.dataProvider()
        # Enter editing mode
        vl.startEditing()
        # is this needed?
        # add fields
        # 
        #latitude,longitude,altitude,acqtime,flightdosevd1,flightdosevd2,specvd1,specvd2,laseralt,radalt,pressure,temperature,linenumber,filename
        pr.addAttributes( [ QgsField("gpsaltitude", QVariant.Double),
                        QgsField("acqtime",  QVariant.String),
                        QgsField("dose1", QVariant.Double),
                        QgsField("dose2", QVariant.Double),
                        QgsField("spectre1", QVariant.String),
                        QgsField("spectre2", QVariant.String),
                        QgsField("altitude", QVariant.Double),
                        QgsField("pressure", QVariant.Double),
                        QgsField("temperature", QVariant.Double),
                        QgsField("linenumber", QVariant.Int),
                        QgsField("filename", QVariant.String),
                        QgsField("mission", QVariant.String)] )

        # Commit changes - is this needed?
        vl.commitChanges()
        # To display the new layer in the project
        QgsProject.instance().addMapLayer(vl)
        # Default layer to import data into
        self.dlg.cbMapLayer.setLayer(vl)
